-- Q1:What is the total amount each customer spent at the restaurant?

SELECT S.CUSTOMER_ID,
	SUM(M.PRICE)
FROM SALES S
LEFT JOIN MENU M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY S.CUSTOMER_ID
ORDER BY S.CUSTOMER_ID;



-- Q2: How many days has each customer visited the restaurant?

SELECT CUSTOMER_ID,
	COUNT(DISTINCT(ORDER_DATE))
FROM SALES
GROUP BY CUSTOMER_ID
ORDER BY CUSTOMER_ID;


-- Q3: What was the first item from the menu purchased by each customer?

SELECT CUSTOMER_ID,
	PRODUCT_ID
FROM
	(SELECT CUSTOMER_ID,
			ORDER_DATE,
			PRODUCT_ID,
			ROW_NUMBER() OVER(PARTITION BY CUSTOMER_ID
								ORDER BY ORDER_DATE) AS RN
		FROM SALES)
WHERE RN = 1;



-- Q4: What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT S.PRODUCT_ID,
	M.PRODUCT_NAME,
	COUNT(S.PRODUCT_ID) AS PURCHASE_COUNT
FROM SALES S
LEFT JOIN MENU M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY S.PRODUCT_ID,
	M.PRODUCT_NAME
ORDER BY PURCHASE_COUNT DESC
LIMIT 1;



-- Q5: Which item was the most popular for each customer?

WITH CTE AS
	(SELECT S.CUSTOMER_ID,
			S.PRODUCT_ID,
			M.PRODUCT_NAME,
			DENSE_RANK() OVER(PARTITION BY S.CUSTOMER_ID
								ORDER BY COUNT(S.PRODUCT_ID) DESC) AS POPULARITY
		FROM SALES S
		LEFT JOIN MENU M ON S.PRODUCT_ID = M.PRODUCT_ID
		GROUP BY S.CUSTOMER_ID,
			S.PRODUCT_ID,
			M.PRODUCT_NAME)
			
SELECT CUSTOMER_ID,
	PRODUCT_NAME AS MOST_POPULAR
FROM CTE
WHERE POPULARITY = 1;



-- Q6: Which item was purchased first by the customer after they became a member?

WITH CTE AS
	(SELECT S.CUSTOMER_ID,
			S.ORDER_DATE,
			M.JOIN_DATE,
			S.PRODUCT_ID,
			ROW_NUMBER() OVER(PARTITION BY S.CUSTOMER_ID
								ORDER BY S.ORDER_DATE) AS RN
		FROM SALES S
		JOIN MEMBERS M ON S.CUSTOMER_ID = M.CUSTOMER_ID
		WHERE S.ORDER_DATE > M.JOIN_DATE)
		
SELECT C.CUSTOMER_ID,
	M.PRODUCT_ID,
	M.PRODUCT_NAME
FROM CTE C
JOIN MENU M ON C.PRODUCT_ID = M.PRODUCT_ID
WHERE RN = 1
ORDER BY C.CUSTOMER_ID;



-- Q7: Which item was purchased just before the customer became a member?

WITH CTE AS
	(SELECT S.CUSTOMER_ID,
			S.ORDER_DATE,
			M.JOIN_DATE,
			S.PRODUCT_ID,
			ROW_NUMBER() OVER(PARTITION BY S.CUSTOMER_ID
								ORDER BY S.ORDER_DATE DESC) AS RN
		FROM SALES S
		JOIN MEMBERS M ON S.CUSTOMER_ID = M.CUSTOMER_ID
		WHERE S.ORDER_DATE < M.JOIN_DATE)
		
SELECT C.CUSTOMER_ID,
	M.PRODUCT_ID,
	M.PRODUCT_NAME
FROM CTE C
JOIN MENU M ON C.PRODUCT_ID = M.PRODUCT_ID
WHERE RN = 1
ORDER BY C.CUSTOMER_ID;


-- Q8: What is the no of unique items bought and amount spent for each member before they became a member?

WITH CTE AS
	(SELECT S.CUSTOMER_ID,
			S.PRODUCT_ID,
			SUM(U.PRICE) OVER(PARTITION BY S.CUSTOMER_ID) AS TOTAL_SPENT
		FROM SALES S
		JOIN MEMBERS M ON S.CUSTOMER_ID = M.CUSTOMER_ID
		JOIN MENU U ON S.PRODUCT_ID = U.PRODUCT_ID
		WHERE S.ORDER_DATE < M.JOIN_DATE)
		
		
SELECT CUSTOMER_ID,
	TOTAL_SPENT,
	COUNT(DISTINCT(PRODUCT_ID)) AS TYPE_ITEM_BT
FROM CTE
GROUP BY CUSTOMER_ID,
	TOTAL_SPENT;



-- Q9: If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH CTE AS
	(SELECT PRODUCT_ID,
			CASE
				WHEN PRODUCT_ID = 1 THEN PRICE * 20
				ELSE PRICE * 10
			END AS POINTS
		FROM MENU)
		
SELECT S.CUSTOMER_ID,
	SUM(M.POINTS) AS TOTAL_POINTS
FROM SALES S
JOIN CTE M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY S.CUSTOMER_ID
ORDER BY S.CUSTOMER_ID;


-- Q10: In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi
-- - how many points do customer A and B have at the end of January?

WITH CTE AS
	(SELECT CUSTOMER_ID,
			JOIN_DATE,
			JOIN_DATE + 6 AS VALID_DATE,
			DATE_TRUNC('month',
				'2021-01-31'::DATE) + interval '1 month' - interval '1 day' AS LAST_DATE
		FROM MEMBERS)
		
SELECT S.CUSTOMER_ID,
	SUM(CASE
			WHEN M.PRODUCT_NAME = 'sushi' THEN 2 * 10 * M.PRICE
			WHEN S.ORDER_DATE BETWEEN DATES.JOIN_DATE AND DATES.VALID_DATE THEN 2 * 10 * M.PRICE
			ELSE 10 * M.PRICE
		END) AS POINTS
FROM SALES S
JOIN CTE AS DATES ON S.CUSTOMER_ID = DATES.CUSTOMER_ID
AND S.ORDER_DATE <= DATES.LAST_DATE
JOIN MENU M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY S.CUSTOMER_ID;

-- Bonus Ques 1: Join all the things

SELECT S.CUSTOMER_ID,
	S.ORDER_DATE,
	M.PRODUCT_NAME,
	M.PRICE,
	CASE
		WHEN S.ORDER_DATE < E.JOIN_DATE THEN 'N'
		WHEN E.JOIN_DATE IS NULL THEN 'N'
		ELSE 'Y'
	END AS MEMBER
FROM SALES S
JOIN MENU M ON S.PRODUCT_ID = M.PRODUCT_ID
LEFT JOIN MEMBERS E ON S.CUSTOMER_ID = E.CUSTOMER_ID
ORDER BY S.CUSTOMER_ID,
	S.ORDER_DATE;


-- Bonus Ques 2: Danny also requires further information about the ranking of customer products, but he purposely does not need the 
-- ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.

WITH CTE AS
	(SELECT S.CUSTOMER_ID,
			S.ORDER_DATE,
			M.PRODUCT_NAME,
			M.PRICE,
			CASE
				WHEN S.ORDER_DATE < E.JOIN_DATE THEN 'N'
				WHEN E.JOIN_DATE IS NULL THEN 'N'
				ELSE 'Y'
			END AS MEMBER
		FROM SALES S
		JOIN MENU M ON S.PRODUCT_ID = M.PRODUCT_ID
		LEFT JOIN MEMBERS E ON S.CUSTOMER_ID = E.CUSTOMER_ID
		ORDER BY S.CUSTOMER_ID,
			S.ORDER_DATE)
SELECT *,
	CASE
		WHEN MEMBER = 'N' THEN NULL
		ELSE RANK () OVER(PARTITION BY CUSTOMER_ID,MEMBER
								ORDER BY ORDER_DATE)
	END AS RANKING
FROM CTE;